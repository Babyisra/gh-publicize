#!/usr/bin/env bash
set -e

CACHE_DIR=
DEBUG=false
INCLUDE_ARCHIVED_REPOS=false
PRESERVE=false
REVIEWERS=
RUN=false
SELECTOR=
SOURCE_REPO=
SOURCE_REPO_REV="main"

__USAGE="
Publish content in target repositories from source repository.

USAGE
  gh publicize [flags] --repo=<owner>/<repo> [...] <cmd>
  gh publicize [flags] --repos=<file> <cmd>
  gh publicize [flags] --org=<org> <cmd>

FLAGS
  -a, --include-archived-repos         Whether to include archived repositories
  -c, --cache-dir=<cache-dir>          Name of directory containing preserved data to reuse
  -d, --debug                          Enable debug logging
  -h, --help                           Displays help usage
  -m, --repo=<owner>/<repo>            Target a specific repo, can be passed multiple times to target several repos
  -n, --repos=<file>                   Target multiple repos, file contains <owner>/<repo> entry per line
  -o, --org=<org>                      Target all repos in GitHub organization
  -p, --preserve                       Preserve temporary directory containing data
  -R, --reviewers=<csv-usernames>      Comma-separated list of usernames to review pull request
  -r, --run                            Apply changes; defaults to dryrun
  -s, --source-repo=<owner>/<repo>     Name of source repository to clone
  -t, --source-repo-revision=<rev>     Revision of source repository to checkout; default '$SOURCE_REPO_REV'

ENVIRONMENT VARIABLES
  PUBLICIZE_HOME                       Path to gh-publicize
  PUBLICIZE_LIB                        Path to gh-publicize/lib
  PUBLICIZE_SOURCE_DIR                 Path to source repository cloned for use
";

die() {
	printf "\nError: %s\n" "$1"
	echo "$__USAGE"
	exit 1
}

if ! type -p gh > /dev/null; then
	die "'gh' could not be found"
fi

if ! type -p git-xargs > /dev/null; then
	die "'git-xargs' could not be found"
fi

while getopts "c:dhm:n:o:pR:rs:t:-:" OPT; do
	if [ "$OPT" = "-" ]; then    # long option: reformulate OPT and OPTARG
		OPT="${OPTARG%%=*}"      # extract long option name
		OPTARG="${OPTARG#$OPT}"	 # extract long option argument (may be empty)
		OPTARG="${OPTARG#=}"     # if long option argument, remove assigning `=`
	fi

	case "$OPT" in

		cache-dir | c)
			CACHE_DIR="${OPTARG}"
			;;

		debug | d)
			set -x
			DEBUG=true
			;;

		help | h)
			echo "$__USAGE"
			exit 0
			;;

		include-archived-repos | a)
			INCLUDE_ARCHIVED_REPOS=true
			;;

		repo | m)
			SELECTOR="$SELECTOR --repo ${OPTARG}"
			;;

		repos | n)
			SELECTOR="--repos ${OPTARG}"
			;;

		org | o)
			SELECTOR="--github-org ${OPTARG}"
			;;

		preserve | p)
			PRESERVE=true
			;;

		reviewers | R)
			REVIEWERS="${OPTARG}"
			;;

		run | r)
			RUN=true
			;;

		source-repo | s)
			SOURCE_REPO="${OPTARG}"
			;;

		source-repo-revision | t)
			SOURCE_REPO_REV="${OPTARG}"
			;;
	esac
done

# shift so that $@, $1, etc. refer to the non-option arguments
shift "$((OPTIND-1))"

if [ -z "$SOURCE_REPO" ]; then
	die "Must provide source repository (-s,--source-repo)"
fi

if [ -z "$SELECTOR" ]; then
	die "Must provide selector (-m,--repo | -n,--repos | -o,--org)"
fi

if test "$#" -lt 1; then
  die "Must provide command to execute"
fi

# Prepare temporary working directory for caching data
if test -d "$CACHE_DIR"; then
	echo "Using existing directory for caching data:  $CACHE_DIR"
elif [ -z "$CACHE_DIR" ]; then
	CACHE_DIR="$(mktemp -d -t gh-publicizeXXX)"
	echo "Created temporary directory for caching data:  $CACHE_DIR"

	if ! $PRESERVE; then
		trap 'rm -rf -- "$CACHE_DIR"' EXIT
	fi
else
	mkdir -p $CACHE_DIR
	echo "Created directory for caching data:  $CACHE_DIR"
fi

export PUBLICIZE_CACHE_DIR="$CACHE_DIR"
export PUBLICIZE_SOURCE_DIR="$PUBLICIZE_CACHE_DIR/_source-repo"

# Prepare latest content for git-xargs
if test -d "$PUBLICIZE_SOURCE_DIR"; then
	echo "Deleting existing directory for source repository:  $PUBLICIZE_SOURCE_DIR"
	rm -rf -- "$PUBLICIZE_SOURCE_DIR"
fi

echo "Cloning $SOURCE_REPO, checking out $SOURCE_REPO_REV"
gh repo clone $SOURCE_REPO $PUBLICIZE_SOURCE_DIR
git -C $PUBLICIZE_SOURCE_DIR checkout $SOURCE_REPO_REV
SOURCE_REPO_SHA=$(git -C $PUBLICIZE_SOURCE_DIR rev-parse HEAD)

# Resolve location of home, containing binaries and libraries
PUBLICIZE_SCRIPT="$(realpath ${BASH_SOURCE:-$0})"

export PUBLICIZE_HOME="$(dirname $PUBLICIZE_SCRIPT)"
export PUBLICIZE_LIB="$PUBLICIZE_HOME/lib"

# Showtime
GIT_XARGS_ARGS="$SELECTOR"

if ! $INCLUDE_ARCHIVED_REPOS; then
	GIT_XARGS_ARGS="$GIT_XARGS_ARGS --skip-archived-repos"
fi

if ! $RUN; then
	GIT_XARGS_ARGS="$GIT_XARGS_ARGS --dry-run"
fi

if $DEBUG; then
	GIT_XARGS_ARGS="$GIT_XARGS_ARGS --loglevel DEBUG"
fi

if [ ! -z "$REVIEWERS" ]; then
	GIT_XARGS_ARGS="$GIT_XARGS_ARGS --reviewers \"$REVIEWERS\""
fi

echo "Executing git-xargs command"

GITHUB_OAUTH_TOKEN=$(gh auth token) git-xargs $GIT_XARGS_ARGS \
	--branch-name "publish-$SOURCE_REPO-$SOURCE_REPO_SHA" \
	--commit-message "Publishing changes based on ${SOURCE_REPO}@${SOURCE_REPO_SHA}" \
	"$@"